<?php

namespace Proxies\__CG__\DBBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Userrole extends \DBBundle\Entity\Userrole implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'name', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'description', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'id', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'status', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'isdeleted', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'datecreated', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'datemodified', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'createdby', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'modifiedby');
        }

        return array('__isInitialized__', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'name', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'description', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'id', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'status', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'isdeleted', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'datecreated', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'datemodified', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'createdby', '' . "\0" . 'DBBundle\\Entity\\Userrole' . "\0" . 'modifiedby');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Userrole $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsdeleted($isdeleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsdeleted', array($isdeleted));

        return parent::setIsdeleted($isdeleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsdeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsdeleted', array());

        return parent::getIsdeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function getDatecreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatecreated', array());

        return parent::getDatecreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setDatecreated($datecreated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatecreated', array($datecreated));

        return parent::setDatecreated($datecreated);
    }

    /**
     * {@inheritDoc}
     */
    public function getDatemodified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatemodified', array());

        return parent::getDatemodified();
    }

    /**
     * {@inheritDoc}
     */
    public function setDatemodified($datemodified)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatemodified', array($datemodified));

        return parent::setDatemodified($datemodified);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedby()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedby', array());

        return parent::getCreatedby();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedby($createdby)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedby', array($createdby));

        return parent::setCreatedby($createdby);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedby()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedby', array());

        return parent::getModifiedby();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedby($modifiedby)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedby', array($modifiedby));

        return parent::setModifiedby($modifiedby);
    }

}
